name: Docker Image API

on:
  push:
    branches: [ "main" ]
    paths:
      - 'api-service/Dockerfile'
      - 'api-service/app.py'

jobs:

  build-and-push:

    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Obter vers達o atual
      id: get_version
      run: |
        VERSION=${{ secrets.VERSION }}
        echo "Vers達o inicial: $VERSION"

        VERSION_MAJOR=$(echo $VERSION | awk -F. '{print $1}')
        VERSION_MINOR=$(echo $VERSION | awk -F. '{print $2+1}')
        VERSION="${VERSION_MAJOR}.${VERSION_MINOR}"

        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "Nova vers達o: $VERSION"

    - name: Configurar Docker
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    - name: build e push imagem Docker
      run: |
        docker build -t luccaspc/api-service:${{ env.VERSION }} ./api-service
        docker push luccaspc/api-service:${{ env.VERSION }}

    - name: Atualizar deployment com nova tag
      run: |
        sed -i "s|image: luccaspc/api-service:.*|image: luccaspc/api-service:${{ env.VERSION }}|" deployment-api.yaml
        sed -i "/name: API_VERSION/{n;s|value: \".*\"|value: \"${{ env.VERSION }}\"|;}" deployment-api.yaml
        git config --global user.name 'github-actions'
        git config --global user.email 'github-actions@github.com'
        git add deployment-api.yaml
        git commit -m "Atualiza imagem do API Service para vers達o ${{ env.VERSION }}"
        git tag v${{ env.VERSION }}
        git remote set-url origin https://x-access-token:${{ secrets.GH_PAT }}@github.com/${{ github.repository }}
        git push origin main --tags
